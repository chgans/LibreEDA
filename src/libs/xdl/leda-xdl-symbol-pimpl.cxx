// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "leda-xdl-symbol-pimpl.hxx"

#include <iostream>

namespace xdl
{
  namespace symbol
  {
    // Symbol_pimpl
    //

    void Symbol_pimpl::
    pre ()
    {
    }

    void Symbol_pimpl::
    name (const ::std::string& name)
    {
      std::cout << "name: " << name << std::endl;
    }

    void Symbol_pimpl::
    label (const ::std::string& label)
    {
      std::cout << "label: " << label << std::endl;
    }

    void Symbol_pimpl::
    drawing (const QList<Item*>& drawing)
    {
      // TODO
      //
    }

    Symbol* Symbol_pimpl::
    post_Symbol ()
    {
      // TODO
      //
      // return ... ;
    }

    // ItemList_pimpl
    //

    void ItemList_pimpl::
    pre ()
    {
    }

    void ItemList_pimpl::
    polyline (PolylineItem* polyline)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    polygon (PolygonItem* polygon)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    rectangle (RectangleItem* rectangle)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    circle (CircleItem* circle)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    circular_arc (CircularArcItem* circular_arc)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    ellipse (EllipseItem* ellipse)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    elliptical_arc (EllipticalArcItem* elliptical_arc)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    label (LabelItem* label)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    pin (PinItem* pin)
    {
      // TODO
      //
    }

    void ItemList_pimpl::
    group (ItemGroup* group)
    {
      // TODO
      //
    }

    QList<Item*> ItemList_pimpl::
    post_ItemList ()
    {
      // TODO
      //
      // return ... ;
    }

    // Item_pimpl
    //

    void Item_pimpl::
    pre ()
    {
    }

    void Item_pimpl::
    position (const QPointF& position)
    {
      // TODO
      //
    }

    void Item_pimpl::
    line_style (const LineStyle& line_style)
    {
      // TODO
      //
    }

    void Item_pimpl::
    line_width (const LineWidth& line_width)
    {
      // TODO
      //
    }

    void Item_pimpl::
    line_color (const Color& line_color)
    {
      // TODO
      //
    }

    void Item_pimpl::
    fill_style (const FillStyle& fill_style)
    {
      // TODO
      //
    }

    void Item_pimpl::
    fill_color (const Color& fill_color)
    {
      // TODO
      //
    }

    void Item_pimpl::
    z_value (double z_value)
    {
      std::cout << "z-value: " << z_value << std::endl;
    }

    void Item_pimpl::
    rotation (const qreal& rotation)
    {
      // TODO
      //
    }

    void Item_pimpl::
    opacity (const qreal& opacity)
    {
      // TODO
      //
    }

    void Item_pimpl::
    locked (bool locked)
    {
      std::cout << "locked: " << locked << std::endl;
    }

    void Item_pimpl::
    x_mirrored (bool x_mirrored)
    {
      std::cout << "x-mirrored: " << x_mirrored << std::endl;
    }

    void Item_pimpl::
    y_mirrored (bool y_mirrored)
    {
      std::cout << "y-mirrored: " << y_mirrored << std::endl;
    }

    void Item_pimpl::
    visible (bool visible)
    {
      std::cout << "visible: " << visible << std::endl;
    }

    void Item_pimpl::
    post_Item ()
    {
    }

    // Circle_pimpl
    //

    void Circle_pimpl::
    pre ()
    {
    }

    void Circle_pimpl::
    radius (const qreal& radius)
    {
      // TODO
      //
    }

    CircleItem* Circle_pimpl::
    post_Circle ()
    {
      post_Item ();
    }

    // CircularArc_pimpl
    //

    void CircularArc_pimpl::
    pre ()
    {
    }

    void CircularArc_pimpl::
    radius (const qreal& radius)
    {
      // TODO
      //
    }

    void CircularArc_pimpl::
    start_angle (const qreal& start_angle)
    {
      // TODO
      //
    }

    void CircularArc_pimpl::
    span_angle (const qreal& span_angle)
    {
      // TODO
      //
    }

    CircularArcItem* CircularArc_pimpl::
    post_CircularArc ()
    {
      post_Item ();
    }

    // Ellipse_pimpl
    //

    void Ellipse_pimpl::
    pre ()
    {
    }

    void Ellipse_pimpl::
    x_radius (const qreal& x_radius)
    {
      // TODO
      //
    }

    void Ellipse_pimpl::
    y_radius (const qreal& y_radius)
    {
      // TODO
      //
    }

    EllipseItem* Ellipse_pimpl::
    post_Ellipse ()
    {
      post_Item ();
    }

    // EllipticalArc_pimpl
    //

    void EllipticalArc_pimpl::
    pre ()
    {
    }

    void EllipticalArc_pimpl::
    x_radius (const qreal& x_radius)
    {
      // TODO
      //
    }

    void EllipticalArc_pimpl::
    y_radius (const qreal& y_radius)
    {
      // TODO
      //
    }

    void EllipticalArc_pimpl::
    start_angle (const qreal& start_angle)
    {
      // TODO
      //
    }

    void EllipticalArc_pimpl::
    span_angle (const qreal& span_angle)
    {
      // TODO
      //
    }

    EllipticalArcItem* EllipticalArc_pimpl::
    post_EllipticalArc ()
    {
      post_Item ();
    }

    // Rectangle_pimpl
    //

    void Rectangle_pimpl::
    pre ()
    {
    }

    void Rectangle_pimpl::
    width (const qreal& width)
    {
      // TODO
      //
    }

    void Rectangle_pimpl::
    height (const qreal& height)
    {
      // TODO
      //
    }

    RectangleItem* Rectangle_pimpl::
    post_Rectangle ()
    {
      post_Item ();
    }

    // Polyline_pimpl
    //

    void Polyline_pimpl::
    pre ()
    {
    }

    void Polyline_pimpl::
    vertices (const QList<QPointF>& vertices)
    {
      // TODO
      //
    }

    PolylineItem* Polyline_pimpl::
    post_Polyline ()
    {
      post_Item ();
    }

    // Polygon_pimpl
    //

    void Polygon_pimpl::
    pre ()
    {
    }

    void Polygon_pimpl::
    vertices (const QList<QPointF>& vertices)
    {
      // TODO
      //
    }

    PolygonItem* Polygon_pimpl::
    post_Polygon ()
    {
      post_Item ();
    }

    // Pin_pimpl
    //

    void Pin_pimpl::
    pre ()
    {
    }

    void Pin_pimpl::
    designator (const ::std::string& designator)
    {
      std::cout << "designator: " << designator << std::endl;
    }

    void Pin_pimpl::
    label (const ::std::string& label)
    {
      std::cout << "label: " << label << std::endl;
    }

    PinItem* Pin_pimpl::
    post_Pin ()
    {
      post_Item ();
    }

    // ItemGroup_pimpl
    //

    void ItemGroup_pimpl::
    pre ()
    {
    }

    void ItemGroup_pimpl::
    children (const QList<Item*>& children)
    {
      // TODO
      //
    }

    ItemGroup* ItemGroup_pimpl::
    post_ItemGroup ()
    {
      post_Item ();
    }

    // Label_pimpl
    //

    void Label_pimpl::
    pre ()
    {
    }

    void Label_pimpl::
    text (const ::std::string& text)
    {
      std::cout << "text: " << text << std::endl;
    }

    void Label_pimpl::
    color (const Color& color)
    {
      // TODO
      //
    }

    void Label_pimpl::
    size (unsigned long long size)
    {
      std::cout << "size: " << size << std::endl;
    }

    LabelItem* Label_pimpl::
    post_Label ()
    {
      post_Item ();
    }

    // Point_pimpl
    //

    void Point_pimpl::
    pre ()
    {
    }

    void Point_pimpl::
    x (double x)
    {
      std::cout << "x: " << x << std::endl;
    }

    void Point_pimpl::
    y (double y)
    {
      std::cout << "y: " << y << std::endl;
    }

    QPointF Point_pimpl::
    post_Point ()
    {
      // TODO
      //
      // return ... ;
    }

    // PointList_pimpl
    //

    void PointList_pimpl::
    pre ()
    {
    }

    void PointList_pimpl::
    point (const QPointF& point)
    {
      // TODO
      //
    }

    QList<QPointF> PointList_pimpl::
    post_PointList ()
    {
      // TODO
      //
      // return ... ;
    }

    // LineWidth_pimpl
    //

    void LineWidth_pimpl::
    pre ()
    {
    }

    LineWidth LineWidth_pimpl::
    post_LineWidth ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
      // return ... ;
    }

    // LineStyle_pimpl
    //

    void LineStyle_pimpl::
    pre ()
    {
    }

    LineStyle LineStyle_pimpl::
    post_LineStyle ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
      // return ... ;
    }

    // FillStyle_pimpl
    //

    void FillStyle_pimpl::
    pre ()
    {
    }

    FillStyle FillStyle_pimpl::
    post_FillStyle ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
      // return ... ;
    }

    // Color_pimpl
    //

    void Color_pimpl::
    pre ()
    {
    }

    Color Color_pimpl::
    post_Color ()
    {
      const ::std::string& v (post_string ());

      // TODO
      //
      // return ... ;
    }

    // Angle_pimpl
    //

    void Angle_pimpl::
    pre ()
    {
    }

    qreal Angle_pimpl::
    post_Angle ()
    {
      double v (post_double ());

      // TODO
      //
      // return ... ;
    }

    // Opacity_pimpl
    //

    void Opacity_pimpl::
    pre ()
    {
    }

    qreal Opacity_pimpl::
    post_Opacity ()
    {
      double v (post_double ());

      // TODO
      //
      // return ... ;
    }

    // NonNegativeDouble_pimpl
    //

    void NonNegativeDouble_pimpl::
    pre ()
    {
    }

    qreal NonNegativeDouble_pimpl::
    post_NonNegativeDouble ()
    {
      double v (post_double ());

      // TODO
      //
      // return ... ;
    }
  }
}

