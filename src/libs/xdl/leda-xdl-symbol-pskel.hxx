// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef LEDA_XDL_SYMBOL_PSKEL_HXX
#define LEDA_XDL_SYMBOL_PSKEL_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace xdl
{
  class Symbol_pskel;
  class ItemList_pskel;
  class Item_pskel;
  class Circle_pskel;
  class CircularArc_pskel;
  class Ellipse_pskel;
  class EllipticalArc_pskel;
  class Rectangle_pskel;
  class Polyline_pskel;
  class Polygon_pskel;
  class Pin_pskel;
  class ItemGroup_pskel;
  class Label_pskel;
  class Point_pskel;
  class PointList_pskel;
  class Pen_pskel;
  class Brush_pskel;
  class PenStyle_pskel;
  class PenCapStyle_pskel;
  class PenJoinStyle_pskel;
  class BrushStyle_pskel;
  class Color_pskel;
  class Angle_pskel;
  class Opacity_pskel;
  class NonNegativeDouble_pskel;
  class Font_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

#include <QtGlobal>
#include <QString>
#include <QPointF>
#include <QPen>
#include <QList>
#include <QFont>
#include <QColor>
#include <QBrush>
#include "symbolitem.h"
#include "symboldocument.h"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

namespace xdl
{
  class Symbol_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    label (const ::std::string&);

    virtual void
    drawing (const QList<xdl::symbol::Item*>&);

    virtual xdl::symbol::Document*
    post_Symbol () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    label_parser (::xml_schema::string_pskel&);

    void
    drawing_parser (::xdl::ItemList_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* label */,
             ::xdl::ItemList_pskel& /* drawing */);

    // Constructor.
    //
    Symbol_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* label_parser_;
    ::xdl::ItemList_pskel* drawing_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Symbol_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ItemList_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    polyline (xdl::symbol::PolylineItem*);

    virtual void
    polygon (xdl::symbol::PolygonItem*);

    virtual void
    rectangle (xdl::symbol::RectangleItem*);

    virtual void
    circle (xdl::symbol::CircleItem*);

    virtual void
    circular_arc (xdl::symbol::CircularArcItem*);

    virtual void
    ellipse (xdl::symbol::EllipseItem*);

    virtual void
    elliptical_arc (xdl::symbol::EllipticalArcItem*);

    virtual void
    label (xdl::symbol::LabelItem*);

    virtual void
    pin (xdl::symbol::PinItem*);

    virtual void
    group (xdl::symbol::ItemGroup*);

    virtual QList<xdl::symbol::Item*>
    post_ItemList () = 0;

    // Parser construction API.
    //
    void
    polyline_parser (::xdl::Polyline_pskel&);

    void
    polygon_parser (::xdl::Polygon_pskel&);

    void
    rectangle_parser (::xdl::Rectangle_pskel&);

    void
    circle_parser (::xdl::Circle_pskel&);

    void
    circular_arc_parser (::xdl::CircularArc_pskel&);

    void
    ellipse_parser (::xdl::Ellipse_pskel&);

    void
    elliptical_arc_parser (::xdl::EllipticalArc_pskel&);

    void
    label_parser (::xdl::Label_pskel&);

    void
    pin_parser (::xdl::Pin_pskel&);

    void
    group_parser (::xdl::ItemGroup_pskel&);

    void
    parsers (::xdl::Polyline_pskel& /* polyline */,
             ::xdl::Polygon_pskel& /* polygon */,
             ::xdl::Rectangle_pskel& /* rectangle */,
             ::xdl::Circle_pskel& /* circle */,
             ::xdl::CircularArc_pskel& /* circular-arc */,
             ::xdl::Ellipse_pskel& /* ellipse */,
             ::xdl::EllipticalArc_pskel& /* elliptical-arc */,
             ::xdl::Label_pskel& /* label */,
             ::xdl::Pin_pskel& /* pin */,
             ::xdl::ItemGroup_pskel& /* group */);

    // Constructor.
    //
    ItemList_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Polyline_pskel* polyline_parser_;
    ::xdl::Polygon_pskel* polygon_parser_;
    ::xdl::Rectangle_pskel* rectangle_parser_;
    ::xdl::Circle_pskel* circle_parser_;
    ::xdl::CircularArc_pskel* circular_arc_parser_;
    ::xdl::Ellipse_pskel* ellipse_parser_;
    ::xdl::EllipticalArc_pskel* elliptical_arc_parser_;
    ::xdl::Label_pskel* label_parser_;
    ::xdl::Pin_pskel* pin_parser_;
    ::xdl::ItemGroup_pskel* group_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::ItemList_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class Item_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pen (const QPen&);

    virtual void
    brush (const QBrush&);

    virtual void
    position (const QPointF&);

    virtual void
    z_value (double);

    virtual void
    rotation (const qreal&);

    virtual void
    opacity (const qreal&);

    virtual void
    locked (bool);

    virtual void
    x_mirrored (bool);

    virtual void
    visible (bool);

    virtual void
    post_Item ();

    // Parser construction API.
    //
    void
    pen_parser (::xdl::Pen_pskel&);

    void
    brush_parser (::xdl::Brush_pskel&);

    void
    position_parser (::xdl::Point_pskel&);

    void
    z_value_parser (::xml_schema::double_pskel&);

    void
    rotation_parser (::xdl::Angle_pskel&);

    void
    opacity_parser (::xdl::Opacity_pskel&);

    void
    locked_parser (::xml_schema::boolean_pskel&);

    void
    x_mirrored_parser (::xml_schema::boolean_pskel&);

    void
    visible_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */);

    // Constructor.
    //
    Item_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Pen_pskel* pen_parser_;
    ::xdl::Brush_pskel* brush_parser_;
    ::xdl::Point_pskel* position_parser_;
    ::xml_schema::double_pskel* z_value_parser_;
    ::xdl::Angle_pskel* rotation_parser_;
    ::xdl::Opacity_pskel* opacity_parser_;
    ::xml_schema::boolean_pskel* locked_parser_;
    ::xml_schema::boolean_pskel* x_mirrored_parser_;
    ::xml_schema::boolean_pskel* visible_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Item_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Circle_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    center (const QPointF&);

    virtual void
    radius (const qreal&);

    virtual xdl::symbol::CircleItem*
    post_Circle () = 0;

    // Parser construction API.
    //
    void
    center_parser (::xdl::Point_pskel&);

    void
    radius_parser (::xdl::NonNegativeDouble_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::Point_pskel& /* center */,
             ::xdl::NonNegativeDouble_pskel& /* radius */);

    // Constructor.
    //
    Circle_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Point_pskel* center_parser_;
    ::xdl::NonNegativeDouble_pskel* radius_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Circle_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class CircularArc_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    center (const QPointF&);

    virtual void
    radius (const qreal&);

    virtual void
    start_angle (const qreal&);

    virtual void
    span_angle (const qreal&);

    virtual xdl::symbol::CircularArcItem*
    post_CircularArc () = 0;

    // Parser construction API.
    //
    void
    center_parser (::xdl::Point_pskel&);

    void
    radius_parser (::xdl::NonNegativeDouble_pskel&);

    void
    start_angle_parser (::xdl::Angle_pskel&);

    void
    span_angle_parser (::xdl::Angle_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::Point_pskel& /* center */,
             ::xdl::NonNegativeDouble_pskel& /* radius */,
             ::xdl::Angle_pskel& /* start-angle */,
             ::xdl::Angle_pskel& /* span-angle */);

    // Constructor.
    //
    CircularArc_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Point_pskel* center_parser_;
    ::xdl::NonNegativeDouble_pskel* radius_parser_;
    ::xdl::Angle_pskel* start_angle_parser_;
    ::xdl::Angle_pskel* span_angle_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::CircularArc_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Ellipse_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    center (const QPointF&);

    virtual void
    x_radius (const qreal&);

    virtual void
    y_radius (const qreal&);

    virtual xdl::symbol::EllipseItem*
    post_Ellipse () = 0;

    // Parser construction API.
    //
    void
    center_parser (::xdl::Point_pskel&);

    void
    x_radius_parser (::xdl::NonNegativeDouble_pskel&);

    void
    y_radius_parser (::xdl::NonNegativeDouble_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::Point_pskel& /* center */,
             ::xdl::NonNegativeDouble_pskel& /* x-radius */,
             ::xdl::NonNegativeDouble_pskel& /* y-radius */);

    // Constructor.
    //
    Ellipse_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Point_pskel* center_parser_;
    ::xdl::NonNegativeDouble_pskel* x_radius_parser_;
    ::xdl::NonNegativeDouble_pskel* y_radius_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Ellipse_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class EllipticalArc_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    center (const QPointF&);

    virtual void
    x_radius (const qreal&);

    virtual void
    y_radius (const qreal&);

    virtual void
    start_angle (const qreal&);

    virtual void
    span_angle (const qreal&);

    virtual xdl::symbol::EllipticalArcItem*
    post_EllipticalArc () = 0;

    // Parser construction API.
    //
    void
    center_parser (::xdl::Point_pskel&);

    void
    x_radius_parser (::xdl::NonNegativeDouble_pskel&);

    void
    y_radius_parser (::xdl::NonNegativeDouble_pskel&);

    void
    start_angle_parser (::xdl::Angle_pskel&);

    void
    span_angle_parser (::xdl::Angle_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::Point_pskel& /* center */,
             ::xdl::NonNegativeDouble_pskel& /* x-radius */,
             ::xdl::NonNegativeDouble_pskel& /* y-radius */,
             ::xdl::Angle_pskel& /* start-angle */,
             ::xdl::Angle_pskel& /* span-angle */);

    // Constructor.
    //
    EllipticalArc_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Point_pskel* center_parser_;
    ::xdl::NonNegativeDouble_pskel* x_radius_parser_;
    ::xdl::NonNegativeDouble_pskel* y_radius_parser_;
    ::xdl::Angle_pskel* start_angle_parser_;
    ::xdl::Angle_pskel* span_angle_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::EllipticalArc_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Rectangle_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    top_left (const QPointF&);

    virtual void
    bottom_right (const QPointF&);

    virtual xdl::symbol::RectangleItem*
    post_Rectangle () = 0;

    // Parser construction API.
    //
    void
    top_left_parser (::xdl::Point_pskel&);

    void
    bottom_right_parser (::xdl::Point_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::Point_pskel& /* top-left */,
             ::xdl::Point_pskel& /* bottom-right */);

    // Constructor.
    //
    Rectangle_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Point_pskel* top_left_parser_;
    ::xdl::Point_pskel* bottom_right_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Rectangle_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Polyline_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    vertices (const QList<QPointF>&);

    virtual xdl::symbol::PolylineItem*
    post_Polyline () = 0;

    // Parser construction API.
    //
    void
    vertices_parser (::xdl::PointList_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::PointList_pskel& /* vertices */);

    // Constructor.
    //
    Polyline_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::PointList_pskel* vertices_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Polyline_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Polygon_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    vertices (const QList<QPointF>&);

    virtual xdl::symbol::PolygonItem*
    post_Polygon () = 0;

    // Parser construction API.
    //
    void
    vertices_parser (::xdl::PointList_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::PointList_pskel& /* vertices */);

    // Constructor.
    //
    Polygon_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::PointList_pskel* vertices_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Polygon_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Pin_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    designator (const ::std::string&);

    virtual void
    label (const ::std::string&);

    virtual xdl::symbol::PinItem*
    post_Pin () = 0;

    // Parser construction API.
    //
    void
    designator_parser (::xml_schema::string_pskel&);

    void
    label_parser (::xml_schema::string_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xml_schema::string_pskel& /* designator */,
             ::xml_schema::string_pskel& /* label */);

    // Constructor.
    //
    Pin_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* designator_parser_;
    ::xml_schema::string_pskel* label_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Pin_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class ItemGroup_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    children (const QList<xdl::symbol::Item*>&);

    virtual xdl::symbol::ItemGroup*
    post_ItemGroup () = 0;

    // Parser construction API.
    //
    void
    children_parser (::xdl::ItemList_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xdl::ItemList_pskel& /* children */);

    // Constructor.
    //
    ItemGroup_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::ItemList_pskel* children_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::ItemGroup_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Label_pskel: public virtual ::xdl::Item_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    text (const ::std::string&);

    virtual void
    font (const QFont&);

    virtual xdl::symbol::LabelItem*
    post_Label () = 0;

    // Parser construction API.
    //
    void
    text_parser (::xml_schema::string_pskel&);

    void
    font_parser (::xdl::Font_pskel&);

    void
    parsers (::xdl::Pen_pskel& /* pen */,
             ::xdl::Brush_pskel& /* brush */,
             ::xdl::Point_pskel& /* position */,
             ::xml_schema::double_pskel& /* z-value */,
             ::xdl::Angle_pskel& /* rotation */,
             ::xdl::Opacity_pskel& /* opacity */,
             ::xml_schema::boolean_pskel& /* locked */,
             ::xml_schema::boolean_pskel& /* x-mirrored */,
             ::xml_schema::boolean_pskel& /* visible */,
             ::xml_schema::string_pskel& /* text */,
             ::xdl::Font_pskel& /* font */);

    // Constructor.
    //
    Label_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* text_parser_;
    ::xdl::Font_pskel* font_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Label_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Point_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    x (double);

    virtual void
    y (double);

    virtual QPointF
    post_Point () = 0;

    // Parser construction API.
    //
    void
    x_parser (::xml_schema::double_pskel&);

    void
    y_parser (::xml_schema::double_pskel&);

    void
    parsers (::xml_schema::double_pskel& /* x */,
             ::xml_schema::double_pskel& /* y */);

    // Constructor.
    //
    Point_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::double_pskel* x_parser_;
    ::xml_schema::double_pskel* y_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Point_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class PointList_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    point (const QPointF&);

    virtual QList<QPointF>
    post_PointList () = 0;

    // Parser construction API.
    //
    void
    point_parser (::xdl::Point_pskel&);

    void
    parsers (::xdl::Point_pskel& /* point */);

    // Constructor.
    //
    PointList_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Point_pskel* point_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::PointList_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Pen_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    width (const qreal&);

    virtual void
    color (const QColor&);

    virtual void
    style (const Qt::PenStyle&);

    virtual void
    cap_style (const Qt::PenCapStyle&);

    virtual void
    join_style (const Qt::PenJoinStyle&);

    virtual QPen
    post_Pen () = 0;

    // Parser construction API.
    //
    void
    width_parser (::xdl::NonNegativeDouble_pskel&);

    void
    color_parser (::xdl::Color_pskel&);

    void
    style_parser (::xdl::PenStyle_pskel&);

    void
    cap_style_parser (::xdl::PenCapStyle_pskel&);

    void
    join_style_parser (::xdl::PenJoinStyle_pskel&);

    void
    parsers (::xdl::NonNegativeDouble_pskel& /* width */,
             ::xdl::Color_pskel& /* color */,
             ::xdl::PenStyle_pskel& /* style */,
             ::xdl::PenCapStyle_pskel& /* cap-style */,
             ::xdl::PenJoinStyle_pskel& /* join-style */);

    // Constructor.
    //
    Pen_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::NonNegativeDouble_pskel* width_parser_;
    ::xdl::Color_pskel* color_parser_;
    ::xdl::PenStyle_pskel* style_parser_;
    ::xdl::PenCapStyle_pskel* cap_style_parser_;
    ::xdl::PenJoinStyle_pskel* join_style_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Pen_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class Brush_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    color (const QColor&);

    virtual void
    style (const Qt::BrushStyle&);

    virtual QBrush
    post_Brush () = 0;

    // Parser construction API.
    //
    void
    color_parser (::xdl::Color_pskel&);

    void
    style_parser (::xdl::BrushStyle_pskel&);

    void
    parsers (::xdl::Color_pskel& /* color */,
             ::xdl::BrushStyle_pskel& /* style */);

    // Constructor.
    //
    Brush_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xdl::Color_pskel* color_parser_;
    ::xdl::BrushStyle_pskel* style_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Brush_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class PenStyle_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual Qt::PenStyle
    post_PenStyle () = 0;
  };

  class PenCapStyle_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual Qt::PenCapStyle
    post_PenCapStyle () = 0;
  };

  class PenJoinStyle_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual Qt::PenJoinStyle
    post_PenJoinStyle () = 0;
  };

  class BrushStyle_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual Qt::BrushStyle
    post_BrushStyle () = 0;
  };

  class Color_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual QColor
    post_Color () = 0;
  };

  class Angle_pskel: public virtual ::xml_schema::double_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual qreal
    post_Angle () = 0;
  };

  class Opacity_pskel: public virtual ::xml_schema::double_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual qreal
    post_Opacity () = 0;
  };

  class NonNegativeDouble_pskel: public virtual ::xml_schema::double_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual qreal
    post_NonNegativeDouble () = 0;
  };

  class Font_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    family (const ::std::string&);

    virtual void
    size (unsigned long long);

    virtual void
    bold (bool);

    virtual void
    italic (bool);

    virtual void
    underline (bool);

    virtual void
    strikeout (bool);

    virtual QFont
    post_Font () = 0;

    // Parser construction API.
    //
    void
    family_parser (::xml_schema::string_pskel&);

    void
    size_parser (::xml_schema::non_negative_integer_pskel&);

    void
    bold_parser (::xml_schema::boolean_pskel&);

    void
    italic_parser (::xml_schema::boolean_pskel&);

    void
    underline_parser (::xml_schema::boolean_pskel&);

    void
    strikeout_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* family */,
             ::xml_schema::non_negative_integer_pskel& /* size */,
             ::xml_schema::boolean_pskel& /* bold */,
             ::xml_schema::boolean_pskel& /* italic */,
             ::xml_schema::boolean_pskel& /* underline */,
             ::xml_schema::boolean_pskel& /* strikeout */);

    // Constructor.
    //
    Font_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* family_parser_;
    ::xml_schema::non_negative_integer_pskel* size_parser_;
    ::xml_schema::boolean_pskel* bold_parser_;
    ::xml_schema::boolean_pskel* italic_parser_;
    ::xml_schema::boolean_pskel* underline_parser_;
    ::xml_schema::boolean_pskel* strikeout_parser_;

    protected:
    struct v_state_descr_
    {
      void (::xdl::Font_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // LEDA_XDL_SYMBOL_PSKEL_HXX
