// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#ifndef LEDA_XDL_SYMBOL_PIMPL_HXX
#define LEDA_XDL_SYMBOL_PIMPL_HXX

#include "leda-xdl-symbol-pskel.hxx"

namespace xdl
{
  namespace symbol
  {
    class Symbol_pimpl: public virtual Symbol_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      name (const ::std::string&);

      virtual void
      label (const ::std::string&);

      virtual void
      drawing (const QList<Item*>&);

      virtual Symbol*
      post_Symbol ();
    };

    class ItemList_pimpl: public virtual ItemList_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      polyline (PolylineItem*);

      virtual void
      polygon (PolygonItem*);

      virtual void
      rectangle (RectangleItem*);

      virtual void
      circle (CircleItem*);

      virtual void
      circular_arc (CircularArcItem*);

      virtual void
      ellipse (EllipseItem*);

      virtual void
      elliptical_arc (EllipticalArcItem*);

      virtual void
      label (LabelItem*);

      virtual void
      pin (PinItem*);

      virtual void
      group (ItemGroup*);

      virtual QList<Item*>
      post_ItemList ();
    };

    class Item_pimpl: public virtual Item_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      position (const QPointF&);

      virtual void
      line_style (const LineStyle&);

      virtual void
      line_width (const LineWidth&);

      virtual void
      line_color (const Color&);

      virtual void
      fill_style (const FillStyle&);

      virtual void
      fill_color (const Color&);

      virtual void
      z_value (double);

      virtual void
      rotation (const qreal&);

      virtual void
      opacity (const qreal&);

      virtual void
      locked (bool);

      virtual void
      x_mirrored (bool);

      virtual void
      y_mirrored (bool);

      virtual void
      visible (bool);

      virtual void
      post_Item ();
    };

    class Circle_pimpl: public virtual Circle_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      radius (const qreal&);

      virtual CircleItem*
      post_Circle ();
    };

    class CircularArc_pimpl: public virtual CircularArc_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      radius (const qreal&);

      virtual void
      start_angle (const qreal&);

      virtual void
      span_angle (const qreal&);

      virtual CircularArcItem*
      post_CircularArc ();
    };

    class Ellipse_pimpl: public virtual Ellipse_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      x_radius (const qreal&);

      virtual void
      y_radius (const qreal&);

      virtual EllipseItem*
      post_Ellipse ();
    };

    class EllipticalArc_pimpl: public virtual EllipticalArc_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      x_radius (const qreal&);

      virtual void
      y_radius (const qreal&);

      virtual void
      start_angle (const qreal&);

      virtual void
      span_angle (const qreal&);

      virtual EllipticalArcItem*
      post_EllipticalArc ();
    };

    class Rectangle_pimpl: public virtual Rectangle_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      width (const qreal&);

      virtual void
      height (const qreal&);

      virtual RectangleItem*
      post_Rectangle ();
    };

    class Polyline_pimpl: public virtual Polyline_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      vertices (const QList<QPointF>&);

      virtual PolylineItem*
      post_Polyline ();
    };

    class Polygon_pimpl: public virtual Polygon_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      vertices (const QList<QPointF>&);

      virtual PolygonItem*
      post_Polygon ();
    };

    class Pin_pimpl: public virtual Pin_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      designator (const ::std::string&);

      virtual void
      label (const ::std::string&);

      virtual PinItem*
      post_Pin ();
    };

    class ItemGroup_pimpl: public virtual ItemGroup_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      children (const QList<Item*>&);

      virtual ItemGroup*
      post_ItemGroup ();
    };

    class Label_pimpl: public virtual Label_pskel,
      public ::xdl::symbol::Item_pimpl
    {
      public:
      virtual void
      pre ();

      virtual void
      text (const ::std::string&);

      virtual void
      color (const Color&);

      virtual void
      size (unsigned long long);

      virtual LabelItem*
      post_Label ();
    };

    class Point_pimpl: public virtual Point_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      x (double);

      virtual void
      y (double);

      virtual QPointF
      post_Point ();
    };

    class PointList_pimpl: public virtual PointList_pskel
    {
      public:
      virtual void
      pre ();

      virtual void
      point (const QPointF&);

      virtual QList<QPointF>
      post_PointList ();
    };

    class LineWidth_pimpl: public virtual LineWidth_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual LineWidth
      post_LineWidth ();
    };

    class LineStyle_pimpl: public virtual LineStyle_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual LineStyle
      post_LineStyle ();
    };

    class FillStyle_pimpl: public virtual FillStyle_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual FillStyle
      post_FillStyle ();
    };

    class Color_pimpl: public virtual Color_pskel,
      public ::xml_schema::string_pimpl
    {
      public:
      virtual void
      pre ();

      virtual Color
      post_Color ();
    };

    class Angle_pimpl: public virtual Angle_pskel,
      public ::xml_schema::double_pimpl
    {
      public:
      virtual void
      pre ();

      virtual qreal
      post_Angle ();
    };

    class Opacity_pimpl: public virtual Opacity_pskel,
      public ::xml_schema::double_pimpl
    {
      public:
      virtual void
      pre ();

      virtual qreal
      post_Opacity ();
    };

    class NonNegativeDouble_pimpl: public virtual NonNegativeDouble_pskel,
      public ::xml_schema::double_pimpl
    {
      public:
      virtual void
      pre ();

      virtual qreal
      post_NonNegativeDouble ();
    };
  }
}

#endif // LEDA_XDL_SYMBOL_PIMPL_HXX
