// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "leda-xdl-symbol-pimpl.hxx"

#include <iostream>

int
main (int argc, char* argv[])
{
  if (argc != 2)
  {
    std::cerr << "usage: " << argv[0] << " file.xml" << std::endl;
    return 1;
  }

  try
  {
    // Instantiate individual parsers.
    //
    ::xdl::symbol::Symbol_pimpl Symbol_p;
    ::xml_schema::string_pimpl string_p;
    ::xdl::symbol::ItemList_pimpl ItemList_p;
    ::xdl::symbol::Polyline_pimpl Polyline_p;
    ::xdl::symbol::Point_pimpl Point_p;
    ::xml_schema::double_pimpl double_p;
    ::xdl::symbol::LineStyle_pimpl LineStyle_p;
    ::xdl::symbol::LineWidth_pimpl LineWidth_p;
    ::xdl::symbol::Color_pimpl Color_p;
    ::xdl::symbol::FillStyle_pimpl FillStyle_p;
    ::xdl::symbol::Angle_pimpl Angle_p;
    ::xdl::symbol::Opacity_pimpl Opacity_p;
    ::xml_schema::boolean_pimpl boolean_p;
    ::xdl::symbol::PointList_pimpl PointList_p;
    ::xdl::symbol::Polygon_pimpl Polygon_p;
    ::xdl::symbol::Rectangle_pimpl Rectangle_p;
    ::xdl::symbol::NonNegativeDouble_pimpl NonNegativeDouble_p;
    ::xdl::symbol::Circle_pimpl Circle_p;
    ::xdl::symbol::CircularArc_pimpl CircularArc_p;
    ::xdl::symbol::Ellipse_pimpl Ellipse_p;
    ::xdl::symbol::EllipticalArc_pimpl EllipticalArc_p;
    ::xdl::symbol::Label_pimpl Label_p;
    ::xml_schema::non_negative_integer_pimpl non_negative_integer_p;
    ::xdl::symbol::Pin_pimpl Pin_p;
    ::xdl::symbol::ItemGroup_pimpl ItemGroup_p;

    // Connect the parsers together.
    //
    Symbol_p.parsers (string_p,
                      string_p,
                      ItemList_p);

    ItemList_p.parsers (Polyline_p,
                        Polygon_p,
                        Rectangle_p,
                        Circle_p,
                        CircularArc_p,
                        Ellipse_p,
                        EllipticalArc_p,
                        Label_p,
                        Pin_p,
                        ItemGroup_p);

    Polyline_p.parsers (Point_p,
                        LineStyle_p,
                        LineWidth_p,
                        Color_p,
                        FillStyle_p,
                        Color_p,
                        double_p,
                        Angle_p,
                        Opacity_p,
                        boolean_p,
                        boolean_p,
                        boolean_p,
                        boolean_p,
                        PointList_p);

    Point_p.parsers (double_p,
                     double_p);

    PointList_p.parsers (Point_p);

    Polygon_p.parsers (Point_p,
                       LineStyle_p,
                       LineWidth_p,
                       Color_p,
                       FillStyle_p,
                       Color_p,
                       double_p,
                       Angle_p,
                       Opacity_p,
                       boolean_p,
                       boolean_p,
                       boolean_p,
                       boolean_p,
                       PointList_p);

    Rectangle_p.parsers (Point_p,
                         LineStyle_p,
                         LineWidth_p,
                         Color_p,
                         FillStyle_p,
                         Color_p,
                         double_p,
                         Angle_p,
                         Opacity_p,
                         boolean_p,
                         boolean_p,
                         boolean_p,
                         boolean_p,
                         NonNegativeDouble_p,
                         NonNegativeDouble_p);

    Circle_p.parsers (Point_p,
                      LineStyle_p,
                      LineWidth_p,
                      Color_p,
                      FillStyle_p,
                      Color_p,
                      double_p,
                      Angle_p,
                      Opacity_p,
                      boolean_p,
                      boolean_p,
                      boolean_p,
                      boolean_p,
                      NonNegativeDouble_p);

    CircularArc_p.parsers (Point_p,
                           LineStyle_p,
                           LineWidth_p,
                           Color_p,
                           FillStyle_p,
                           Color_p,
                           double_p,
                           Angle_p,
                           Opacity_p,
                           boolean_p,
                           boolean_p,
                           boolean_p,
                           boolean_p,
                           NonNegativeDouble_p,
                           Angle_p,
                           Angle_p);

    Ellipse_p.parsers (Point_p,
                       LineStyle_p,
                       LineWidth_p,
                       Color_p,
                       FillStyle_p,
                       Color_p,
                       double_p,
                       Angle_p,
                       Opacity_p,
                       boolean_p,
                       boolean_p,
                       boolean_p,
                       boolean_p,
                       NonNegativeDouble_p,
                       NonNegativeDouble_p);

    EllipticalArc_p.parsers (Point_p,
                             LineStyle_p,
                             LineWidth_p,
                             Color_p,
                             FillStyle_p,
                             Color_p,
                             double_p,
                             Angle_p,
                             Opacity_p,
                             boolean_p,
                             boolean_p,
                             boolean_p,
                             boolean_p,
                             NonNegativeDouble_p,
                             NonNegativeDouble_p,
                             Angle_p,
                             Angle_p);

    Label_p.parsers (Point_p,
                     LineStyle_p,
                     LineWidth_p,
                     Color_p,
                     FillStyle_p,
                     Color_p,
                     double_p,
                     Angle_p,
                     Opacity_p,
                     boolean_p,
                     boolean_p,
                     boolean_p,
                     boolean_p,
                     string_p,
                     Color_p,
                     non_negative_integer_p);

    Pin_p.parsers (Point_p,
                   LineStyle_p,
                   LineWidth_p,
                   Color_p,
                   FillStyle_p,
                   Color_p,
                   double_p,
                   Angle_p,
                   Opacity_p,
                   boolean_p,
                   boolean_p,
                   boolean_p,
                   boolean_p,
                   string_p,
                   string_p);

    ItemGroup_p.parsers (Point_p,
                         LineStyle_p,
                         LineWidth_p,
                         Color_p,
                         FillStyle_p,
                         Color_p,
                         double_p,
                         Angle_p,
                         Opacity_p,
                         boolean_p,
                         boolean_p,
                         boolean_p,
                         boolean_p,
                         ItemList_p);

    // Parse the XML document.
    //
    ::xml_schema::document doc_p (
      Symbol_p,
      "http://www.leda.org/xdl",
      "symbol");

    Symbol_p.pre ();
    doc_p.parse (argv[1]);
    Symbol* v (Symbol_p.post_Symbol ());

    // TODO
    //
  }
  catch (const ::xml_schema::exception& e)
  {
    std::cerr << e << std::endl;
    return 1;
  }
  catch (const std::ios_base::failure&)
  {
    std::cerr << argv[1] << ": error: io failure" << std::endl;
    return 1;
  }
}

